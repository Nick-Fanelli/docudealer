datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
    output = "../../node_modules/@prisma/client"
}

model User {

    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    ownedDealerships Dealership[] @relation("OwnedDealerships")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {

    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])

}

model Dealership {

    id              String  @id @default(cuid())
    
    name            String
    licenseNumber   String
    stateLicensed   String
    zipCode         String    

    units           Unit[] @relation("Units")

    ownerId         String
    owner           User    @relation("OwnedDealerships", fields: [ownerId], references: [id], onDelete: Cascade)

}

enum TitleStatus {

    CLEAN
    SALVAGE
    REBUILT
    JUNK
    FLOOD
    LEMON

}

enum MileageStatus {

    ACTUAL
    NON_ACTUAL
    EXCEED_MECHANICAL

}

model Unit {

    id              String @id @default(cuid())

    vin             String
    state           String
    status          TitleStatus

    year            Int
    make            String
    model           String

    mileage         Int
    mileageStatus   MileageStatus

    dealershipId    String
    dealership      Dealership  @relation("Units", fields: [dealershipId], references: [id], onDelete: Cascade)

}